package com.ibm.ecm.extension.countfilter;

import javax.servlet.http.HttpServletRequest;

import com.ibm.ecm.extension.PluginResponseFilter;
import com.ibm.ecm.extension.PluginServiceCallbacks;
import com.ibm.json.java.*;
import com.ibm.mm.beans.*;
import com.ibm.mm.beans.workflow.*;
import com.ibm.mm.sdk.common.*;

/**
 * Provides an abstract class that is extended to create a filter for responses
 * from a particular service. The response from the service is provided to the
 * filter in JSON format before it is returned to the web browser. The filter
 * can then modify that response, and the modified response is returned to the
 * web browser.
 */
public class CopyOfWorklistCountResponse extends PluginResponseFilter {

	/**
	 * Returns an array of the services that are extended by this filter.
	 * 
	 * @return A <code>String</code> array of names of the services. These are
	 *         the servlet paths or Struts action names.
	 */
	public String[] getFilteredServices() {
		return new String[] { "/cm/getWorklists" };
	}

	/**
	 * Filters the response from the service.
	 * 
	 * @param serverType
	 *            A <code>String</code> that indicates the type of server that
	 *            is associated with the service. This value can be one or more
	 *            of the following values separated by commas:
	 *            <table border="1">
	 *            <tr>
	 *            <th>Server Type</th>
	 *            <th>Description</th>
	 *            </tr>
	 *            <tr>
	 *            <td><code>p8</code></td>
	 *            <td>IBM FileNet P8</td>
	 *            </tr>
	 *            <tr>
	 *            <td><code>cm</code></td>
	 *            <td>IBM Content Manager</td>
	 *            </tr>
	 *            <tr>
	 *            <td><code>od</code></td>
	 *            <td>IBM Content Manager OnDemand</td>
	 *            </tr>
	 *         	  <tr>
	 *         		<td><code>cmis</code></td>
	 *         		<td>Content Management Interoperability Services</td>
	 *         	  </tr>
	 *            <tr>
	 *            <td><code>common</code></td>
	 *            <td>For services that are not associated with a particular
	 *            server</td>
	 *            </tr>
	 *            </table>
	 * @param callbacks
	 *            An instance of the
	 *            <code>{@link com.ibm.ecm.extension.PluginServiceCallbacks PluginServiceCallbacks}</code>
	 *            class that contains functions that can be used by the service.
	 *            These functions provide access to plug-in configuration and
	 *            content server APIs.
	 * @param request
	 *            An <code>HttpServletRequest</code> object that provides the
	 *            request. The service can access the invocation parameters from
	 *            the request.
	 * @param jsonResponse
	 *            The <code>JSONObject</code> object that is generated by the
	 *            service. Typically, this object is serialized and sent as the
	 *            response. The filter modifies this object to change the
	 *            response that is sent.
	 * @throws Exception
	 *             For exceptions that occur when the service is running.
	 *             Information about the exception is logged as part of the
	 *             client logging and an error response is automatically
	 *             generated and returned.
	 */
	public void filter(String serverType, PluginServiceCallbacks callbacks,
			 HttpServletRequest request, JSONObject jsonResponse) {
			 try{
			 String user = callbacks.getUserId();
			 System.out.println("user = "+user);
			 String config[] = callbacks.getConfigurationKeys();
			 
			 System.out.println("callbacks user conf = "+callbacks.getUserConfigurationKeys());
			 System.out.println("callbacks conf = "+callbacks.getConfigurationKeys());
			 CMBConnection conn = new CMBConnection();
			 conn.setDsType("ICM");
			 //conn.setUserid(ConfigurationService.obtenerParametroSimple(callbacks,0));
			 //conn.setPassword(ConfigurationService.obtenerParametroSimple(callbacks,1));
			 //conn.setServerName(ConfigurationService.obtenerParametroSimple(callbacks,2));
			 //conn.setUserid("icmadmin");
			 conn.setUserid(user);
			 conn.setPassword("BigBlue1");
			//test VM
			 //conn.setServerName("navigatorconn");
			 conn.setServerName("icmnlsdb");
			 //conn.setServerName("LSConnection");
			 conn.connect();
			 CMBDocRoutingQueryServiceICM docRoutingQueryServiceICM = conn.getDocRoutingQueryServiceICM();
			 JSONObject jsonData = (JSONObject)jsonResponse.get("datastore");
			 System.out.println("jsonData = "+jsonData);
			 
			 JSONArray jsonItems = (JSONArray)jsonData.get("items");
			 for(int i = 0; i < jsonItems.size(); i++){
				 JSONObject jsonWorkList = (JSONObject)jsonItems.get(i);
				 
				 //System.out.println("jsonWorkList0 = "+jsonWorkList);
				 //System.out.println("jsonWorkList = "+jsonWorkList.get("worklist_name"));
				 CMBWorkListICM lista = docRoutingQueryServiceICM.getWorkList((String)jsonWorkList.get("worklist_name"));
				 System.out.println("Lista = "+lista.getName());
				 String name = lista.getName() + " (" + docRoutingQueryServiceICM.getCount(lista.getName(),user) + ")";
				 jsonWorkList.put("worklist_name", name);
			 }
			 conn.disconnect();
			 }catch (Exception e){
			 e.printStackTrace();
			 }
	}
}
